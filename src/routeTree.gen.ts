/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as RoutesImport } from './routes/routes';
import { Route as IndexImport } from './routes/index';
import { Route as PoemPoemIdImport } from './routes/poem.$poemId';

// Create/Update Routes

const RoutesRoute = RoutesImport.update({
  id: '/routes',
  path: '/routes',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const PoemPoemIdRoute = PoemPoemIdImport.update({
  id: '/poem/$poemId',
  path: '/poem/$poemId',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/routes': {
      id: '/routes';
      path: '/routes';
      fullPath: '/routes';
      preLoaderRoute: typeof RoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/poem/$poemId': {
      id: '/poem/$poemId';
      path: '/poem/$poemId';
      fullPath: '/poem/$poemId';
      preLoaderRoute: typeof PoemPoemIdImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/routes': typeof RoutesRoute;
  '/poem/$poemId': typeof PoemPoemIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/routes': typeof RoutesRoute;
  '/poem/$poemId': typeof PoemPoemIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/routes': typeof RoutesRoute;
  '/poem/$poemId': typeof PoemPoemIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/routes' | '/poem/$poemId';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/routes' | '/poem/$poemId';
  id: '__root__' | '/' | '/routes' | '/poem/$poemId';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  RoutesRoute: typeof RoutesRoute;
  PoemPoemIdRoute: typeof PoemPoemIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RoutesRoute: RoutesRoute,
  PoemPoemIdRoute: PoemPoemIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/routes",
        "/poem/$poemId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/routes": {
      "filePath": "routes.ts"
    },
    "/poem/$poemId": {
      "filePath": "poem.$poemId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
